{"version":3,"sources":["utils/firebase.js","components/places/index.js","App.js","serviceWorker.js","index.js","index.module.sass","components/places/index.module.sass"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Places","_ref","places","handleClick","map","_ref2","id","name","rating","react_default","a","createElement","key","onClick","className","styles","place","App","state","gmap","center","lat","lng","zoom","handlePlaceSelected","placeData","_this","find","address","location","setState","_this2","this","fetch","method","then","response","json","root","sidebar","components_places","lib_default","bootstrapURLKeys","defaultCenter","props","defaultZoom","Component","defaultProps","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"qMASAA,cARa,CACXC,OAAQ,0CACRC,WAAY,2BACZC,YAAa,kCACbC,UAAW,WACXC,cAAe,uBACfC,kBAAmB,sCCONC,EAXA,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,OAAQC,EAAkBF,EAAlBE,YACxB,OAAOD,EAAOE,IAAI,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,GAAIC,EAAmBF,EAAnBE,KAAMC,EAAaH,EAAbG,OAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKN,EAAIO,QAAS,kBAAMV,EAAYG,IAAKQ,UAAWC,IAAOC,OAC9DP,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,kBAAUH,wBCDZS,6MAWJC,MAAQ,CACNhB,OAAQ,GACRiB,KAAM,CACJC,OAAQ,CACNC,IAAK,WACLC,KAAM,aAERC,KAAM,SAUVC,oBAAsB,SAAAlB,GACpB,IAAMmB,EAAYC,EAAKR,MAAMhB,OAAOyB,KAAK,SAAAX,GAAK,OAAIA,EAAMV,KAAOA,IAEzDa,EAAO,CACXC,OAAQ,CACNC,IAAKI,EAAUG,QAAQC,SAASR,IAChCC,IAAKG,EAAUG,QAAQC,SAASP,KAElCC,KAAM,IAGRG,EAAKI,SAAS,CAAEX,6FAjBE,IAAAY,EAAAC,KAClBC,MAAM,8CAA+C,CAAEC,OAAQ,QAC5DC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAjC,GAAM,OAAI6B,EAAKD,SAAS,CAAE5B,8CAkBlC,OACEO,EAAAC,EAAAC,cAAA,OAAKG,UAAWC,IAAOuB,MACrB7B,EAAAC,EAAAC,cAAA,OAAKG,UAAWC,IAAOwB,SACrB9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAQtC,OAAQ8B,KAAKd,MAAMhB,OAAQC,YAAa6B,KAAKR,uBAEvDf,EAAAC,EAAAC,cAAA,OAAKG,UAAWC,IAAOX,KACrBK,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CACEgC,iBAAkB,CAAE9B,IAAK,2CACzB+B,cAAeX,KAAKY,MAAMzB,KAAKC,OAC/ByB,YAAab,KAAKY,MAAMzB,KAAKI,KAC7BH,OAAQY,KAAKd,MAAMC,KAAKC,OACxBG,KAAMS,KAAKd,MAAMC,KAAKI,gBAtDhBuB,aAAZ7B,EACG8B,aAAe,CACpB5B,KAAM,CACJC,OAAQ,CACNC,IAAK,WACLC,KAAM,aAERC,KAAM,OAuDGN,QCzDK+B,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCbNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,mCElInBC,EAAAC,QAAA,CAAkBzB,KAAA,kBAAAC,QAAA,qBAAAnC,IAAA,sCCAlB0D,EAAAC,QAAA,CAAkB/C,MAAA","file":"static/js/main.1864a1bd.chunk.js","sourcesContent":["import * as firebase from 'firebase';\nvar config = {\n  apiKey: 'AIzaSyBa8nygAxx-25vLMWGJql98CahU1MZ7jCM',\n  authDomain: 'melp-app.firebaseapp.com',\n  databaseURL: 'https://melp-app.firebaseio.com',\n  projectId: 'melp-app',\n  storageBucket: 'melp-app.appspot.com',\n  messagingSenderId: '324771434568',\n};\nfirebase.initializeApp(config);\n","import React from 'react';\nimport styles from './index.module.sass';\n\nconst Places = ({ places, handleClick }) => {\n  return places.map(({ id, name, rating }) => {\n    return (\n      <div key={id} onClick={() => handleClick(id)} className={styles.place}>\n        <p>{name}</p>\n        <p>Stars {rating}</p>\n      </div>\n    );\n  });\n};\n\nexport default Places;\n","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport firebase from './utils/firebase';\n\nimport Places from './components/places/';\nimport styles from './index.module.sass';\n\nclass App extends Component {\n  static defaultProps = {\n    gmap: {\n      center: {\n        lat: 23.3265622,\n        lng: -100.6582013,\n      },\n      zoom: 6.24,\n    },\n  };\n\n  state = {\n    places: [],\n    gmap: {\n      center: {\n        lat: 23.3265622,\n        lng: -100.6582013,\n      },\n      zoom: 6.24,\n    },\n  };\n\n  componentDidMount() {\n    fetch('https://melp-app.firebaseio.com/places.json', { method: 'GET' })\n      .then(response => response.json())\n      .then(places => this.setState({ places }));\n  }\n\n  handlePlaceSelected = id => {\n    const placeData = this.state.places.find(place => place.id === id);\n\n    const gmap = {\n      center: {\n        lat: placeData.address.location.lat,\n        lng: placeData.address.location.lng,\n      },\n      zoom: 12,\n    };\n\n    this.setState({ gmap });\n  };\n\n  render() {\n    return (\n      <div className={styles.root}>\n        <div className={styles.sidebar}>\n          <Places places={this.state.places} handleClick={this.handlePlaceSelected} />\n        </div>\n        <div className={styles.map}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: 'AIzaSyByLqOrwCdAq5etCPFJILUTUgEyhPEm7Ks' }}\n            defaultCenter={this.props.gmap.center}\n            defaultZoom={this.props.gmap.zoom}\n            center={this.state.gmap.center}\n            zoom={this.state.gmap.zoom}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"src_root__nqDeI\",\"sidebar\":\"src_sidebar__1B4Rl\",\"map\":\"src_map__3VERO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"place\":\"places_place__SwsnV\"};"],"sourceRoot":""}